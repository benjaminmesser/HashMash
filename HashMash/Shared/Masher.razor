@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;

<div class="container text-center">
    <div class="row justify-content-center">
        <div class="col-lg-3">
            <Validations @ref="_validations" Mode="ValidationMode.Manual">
                <Validation Validator="@ValidationRule.IsNotEmpty">
                    <TextEdit Size="Size.Medium" Text="@_inputValue" TextChanged="@InputChanged" Placeholder="">
                        <Feedback>
                            <ValidationNone>Input something!</ValidationNone>
                            <ValidationSuccess>Good enough.</ValidationSuccess>
                            <ValidationError>I suggest you enter something or nothing is going to happen...</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Validations>
        </div>
    </div>

    <hr />

    <div class="row justify-content-center">
        <div class="col-md-6" style="overflow:auto">
            @if (_inputValue != "")
            {
                <div class="card" style="margin-bottom: 20px;">
                    <h5 class="card-title">Hash Digest</h5>
                    <p class="card-text">@MashInput()</p>
                </div>
            }
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="card text-start" style="margin-bottom: 20px;">
                <div class="card-body">
                    <form @oninput="StoreState">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" @bind="_charOffsetEnabled" @oninput="(EventArgs) => { _charOffsetEnabled = (bool)EventArgs.Value; }" id="charOffsetCheckbox">
                            <label class="form-check-label" for="charOffsetCheckbox"><Tooltip Text="Click for more info!"><a href="char-offset">Character Offset</a></Tooltip></label>
                            <span style="float: right">@_charOffset</span>
                        </div>
                        <input type="range" name="charOffsetRange" class="form-range" @bind="_charOffset" @oninput="(EventArgs) => { _charOffset = Int32.Parse(EventArgs.Value.ToString()); }" min="0" max="128" step="1">

                        <hr>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" @bind="_bitShiftEnabled" @oninput="(EventArgs) => { _bitShiftEnabled = (bool)EventArgs.Value; }" id="bitShiftCheckbox">
                            <label class="form-check-label" for="bitShiftCheckbox"><Tooltip Text="Click for more info!"><a href="bit-shifting">Bit Shift</a></Tooltip></label>
                            <span style="float: right">@_bitShift</span>
                        </div>
                        <input type="range" class="form-range" @bind="@_bitShift" @oninput="(EventArgs) => { _bitShift = Int32.Parse(EventArgs.Value.ToString()); }" min="0" max="16" step="1">

                        <hr>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" @bind="_modNEnabled" @oninput="(EventArgs) => { _modNEnabled = (bool)EventArgs.Value; }" id="modNRange">
                            <label class="form-check-label" for="modNRange"><Tooltip Text="Click for more info!"><a href="modular-arithmetic">Mod <i>n</i></a></Tooltip></label>
                            <span style="float: right">@_modN</span>

                        </div>
                        <input type="range" class="form-range" @bind="_modN" @oninput="(EventArgs) => { _modN = Int32.Parse(EventArgs.Value.ToString()); }" min="1" max="256" step="1">

                        <hr />
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" @bind="_sha256Enabled" @oninput="(EventArgs) => { _sha256Enabled = (bool)EventArgs.Value; }" id="sha256Checkbox">
                            <label class="form-check-label" for="sha256Checkbox"><Tooltip Text="Click for more info!"><a href="real-world-hashing">SHA 256</a></Tooltip></label>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            @if (_inputValue != "") // Only show output table when there is non empty input from user
            {
                <div class="card text-start" style="margin-bottom:20px;">
                    <div class="table-responsive">
                        <table class="table">

                            <thead>
                                <tr>
                                    <th scope="col">Input</th>
                                    @for (int i = 0; i < _max_table_chars; i++)
                                    {
                                        <th scope="col">@_inputValue[i]</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <th scope="row">Decimal</th>
                                    @for (int i = 0; i < _max_table_chars; i++)
                                    {
                                        // Mash each char -> base 10
                                        <td>
                                            @MashCh(_inputValue[i], 10)

                                        </td>
                                    }
                                </tr>
                                <tr>
                                    <th scope="row">Binary</th>
                                    @for (int i = 0; i < _max_table_chars; i++)
                                    {
                                        // Mash each char -> binary
                                        <td>
                                            @MashCh(_inputValue[i], 2)

                                        </td>
                                    }
                                </tr>
                                <tr>
                                    <th scope="row">Hexadecimal</th>
                                    @for (int i = 0; i < _max_table_chars; i++)
                                    {
                                        // Mash each char -> hexa
                                        <td>
                                            @MashCh(_inputValue[i], 16)

                                        </td>
                                    }
                                </tr>
                            </tbody>
                        </table>

                    </div>
                </div>
            }
        </div>
    </div>
</div>
