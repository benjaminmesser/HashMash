<div class="container text-center">
    <h3>Masher</h3>
    <div class="row justify-content-center">
        <div class="col-lg-3">
            <Validations @ref="validations" Mode="ValidationMode.Manual">
                <Validation Validator="@ValidationRule.IsNotEmpty">
                    <TextEdit Size="Size.Medium" Text="@inputValue" TextChanged="@inputChanged" Placeholder="">
                        <Feedback>
                            <ValidationNone>Input something and start clicking!</ValidationNone>
                            <ValidationSuccess>Good enough.</ValidationSuccess>
                            <ValidationError>I suggest you enter something or nothing is going to happen...</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Validations>
        </div>
    </div>

    <hr />

    <div class="row justify-content-center">
        <div class="col-md-6" style="overflow:auto">
            @if (inputValue != "")
            {
                <div class="card" style="margin:20px">
                    <h5 class="card-title">Hash Digest</h5>
                    <p class="card-text">@mashInput()</p>       
                </div>
            }
            </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="card text-start">
                <div class="card-body">
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" @bind-value="charOffsetEnabled" @oninput="storeState" id="charOffsetRange">
                        <label class="form-check-label" for="charOffsetRange"><Tooltip Text="This is what an offset on a character does">Character Offset</Tooltip></label>
                    </div>
                    <input type="range" class="form-range" @bind-value="_charOffset" @oninput="storeState" min="0" max="128" step="1">
                    <hr>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" @bind-value="bitShiftEnabled" @oninput="storeState" id="bitShiftRange">
                        <label class="form-check-label" for="bitShiftRange"><Tooltip Text="This is what bit shifting does">Bit Shift</Tooltip></label>
                    </div>
                    <input type="range" class="form-range" @bind-value="_bitShift" @oninput="storeState" min="0" max="16" step="1">

                    <hr>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" @bind-value="modNEnabled" @oninput="storeState" id="modNRange">
                        <label class="form-check-label" for="modNRange"><Tooltip Text="This is what mod n does">Mod <i>n</i></Tooltip></label>
                    </div>
                    <input type="range" class="form-range" @bind-value="_modN" @oninput="storeState" min="1" max="256" step="1">

                    <hr />
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" @bind-value="sha256Enabled" @oninput="storeState" id="sha256Checkbox">
                        <label class="form-check-label" for="sha256Checkbox"><Tooltip Text="This is what SHA256 is">SHA 256</Tooltip></label>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            @if (inputValue != "") // Only show output table when there is non empty input from user
            {
                <div class="card">
                    <div class="table-responsive">
                        <table class="table">

                            <thead>
                                <tr>
                                    <th scope="col">Input</th>
                                    @foreach (char c in inputValue)
                                    {
                                        <th scope="col">@c</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <th scope="row">Decimal</th>
                                    @foreach (char c in inputValue)
                                    {
                                        // Mash each char -> base 10
                                        <td>
                                            @mashCh(c, 10)
                                           
                                        </td>
                                    }
                                </tr>
                                <tr>
                                    <th scope="row">Binary</th>
                                    @foreach (char c in inputValue)
                                    {
                                        // Mash each char -> binary
                                        <td>@mashCh(c, 2)</td>
                                    }
                                </tr>
                                <tr>
                                    <th scope="row">Hexadecimal</th>
                                    @foreach (char c in inputValue)
                                    {
                                        // Mash each char -> hexadecimal
                                        <td>@mashCh(c, 16)</td>
                                    }
                                </tr>
                                @*<tr>
                                    <th scope="row">Left Shift by @(_totalCount % 16)</th>
                                    @foreach (char c in inputValue)
                                    {
                                        <td>@shiftCh(c, 16)</td>
                                    }
                                </tr>
                                <tr>
                                    <th scope="row">Modulo @_currentMod</th>
                                    @foreach (char c in inputValue)
                                    {
                                        <td>@modCh(c, 16)</td>
                                    }
                                </tr>*@
                            </tbody>
                        </table>
                        
                    </div>
                </div>
            }
            </div>
    </div>


    

</div>


@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage


@code {

    public string inputValue;
    public bool charOffsetEnabled = false;
    public bool bitShiftEnabled = false;
    public bool modNEnabled = false;
    public bool sha256Enabled = false;

    Validations validations;

    // Check session storage for an existing state, set fields if one exists
    protected override void OnInitialized()
    {

        string sessionInput = sessionStorage.GetItem<string>("input");

        // Test input value for a stored session
        if (sessionInput == null)
        {
            inputValue = "";
        }
        else
        {
            inputValue = sessionInput;
            _charOffset = sessionStorage.GetItem<int>("charOffset");
            _bitShift = sessionStorage.GetItem<int>("bitShift");
            _modN = sessionStorage.GetItem<int>("modN");
        }

    }

    // To reflect changes in user input, as user changes the input
    void inputChanged(string value)
    {
        inputValue = value;

        validations.ValidateAll();

        storeState();
    }

    // Reset state (incl. sessionStorage) but keeps input intact
    public void resetState()
    {
        // Maybe show warning popup here before resetting

        //reset();    // Reset the current masher, excluding user test input

        sessionStorage.SetItem<int>("charOffset", 0);
        sessionStorage.SetItem<int>("bitShift", 0);
        sessionStorage.SetItem<int>("modN", 0);

    }

    // Store the state to session storage
    public void storeState()
    {
        sessionStorage.SetItem<string>("input", inputValue);
        sessionStorage.SetItem<int>("charOffset", _charOffset);
        sessionStorage.SetItem<int>("bitShift", _bitShift);
        sessionStorage.SetItem<int>("modN", _modN);
    }

}
