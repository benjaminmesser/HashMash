
<div class="container text-center">
    <h3>Masher</h3>
    <div class="row justify-content-center">
        <div class="col-lg-3">
            <Validations @ref="validations" Mode="ValidationMode.Manual">
                <Validation Validator="@ValidationRule.IsNotEmpty">
                    <TextEdit Size="Size.Medium" Text="@inputValue" TextChanged="@inputChanged" Placeholder="">
                        <Feedback>
                            <ValidationNone>Input something and start clicking!</ValidationNone>
                            <ValidationSuccess>Good enough.</ValidationSuccess>
                            <ValidationError>I suggest you enter something or nothing is going to happen...</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Validations>
        </div>
    </div>

    <hr />

    <p>Total Clicks: @_totalCount</p>

    <h6>Level: @_currentLevel</h6>

    <h5>Level Clicks: @_levelCount</h5>

    <div class="row justify-content-center" style="padding-bottom: 15px">
        <div class="col-sm-4">
            <div class="progress">
                <div class="progress-bar progress-bar-animated" role="progressbar" aria-valuenow="@_progress%" aria-valuemin="0" aria-valuemax="64" style="width: @_progress%"></div>
            </div>
        </div>
    </div>


    <div class="row justify-content-center">
        <div class="col-sm-2" style="padding-bottom: 10px;">
            <button type="button" @onclick="incrementState" class="btn btn-outline-success">Mash</button>
            <button type="button" @onclick="resetState" class="btn btn-outline-danger">Reset</button>
        </div>
    </div>


    @if (inputValue != "")
    {
        // Display the hash digest
        <h4>Hash Digest:</h4>
        <h5>@mashInput()</h5>
    }

    <div class="table-responsive">
        @if (inputValue != "") // Only show output table when there is non empty input from user
        {
            <table class="table">

                <thead>
                    <tr>
                        <th scope="col">Input</th>
                        @foreach (char c in inputValue)
                        {
                            <th scope="col">
                                @c
                                @if (_levelCount > 0)
                                {
                                    <small> (+ @_levelCount)</small>
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th scope="row">Decimal</th>
                        @foreach (char c in inputValue)
                        {
                            // Mash each char -> base 10
                            <td>@mashCh(c, 10)</td>
                        }
                    </tr>
                    <tr>
                        <th scope="row">Binary</th>
                        @foreach (char c in inputValue)
                        {
                            // Mash each char -> binary
                            <td>@mashCh(c, 2)</td>
                        }
                    </tr>
                    <tr>
                        <th scope="row">Hexadecimal</th>
                        @foreach (char c in inputValue)
                        {
                            // Mash each char -> hexadecimal
                            <td>@mashCh(c, 16)</td>
                        }
                    </tr>
                    <tr>
                        <th scope="row">Left Shift by @(_totalCount % 16)</th>
                        @foreach (char c in inputValue)
                        {
                            <td>@shiftCh(c, 16)</td>
                        }
                    </tr>
                    <tr>
                        <th scope="row">Modulo @_currentMod</th>
                        @foreach (char c in inputValue)
                        {
                            <td>@modCh(c, 16)</td>
                        }
                    </tr>
                </tbody>
            </table>
        }
    </div>
    <HashMash.Shared.LevelExplanations.LevelAccordian></HashMash.Shared.LevelExplanations.LevelAccordian>
</div>


@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage


@code {

    public string inputValue;

    Validations validations;

    // Check session storage for an existing state, set fields if one exists
    protected override void OnInitialized()
    {

        string sessionInput = sessionStorage.GetItem<string>("input");

        // Test input value for a stored session
        if (sessionInput == null)
        {
            inputValue = "";
        }
        else
        {
            inputValue = sessionInput;
            _totalCount = sessionStorage.GetItem<int>("totalCount");
            _levelCount = sessionStorage.GetItem<int>("levelCount");
            _currentLevel = sessionStorage.GetItem<int>("currentLevel");
            _progress = (((float) _levelCount) / 64) * 100;
        }

    }

    // To reflect changes in user input, as user changes the input
    void inputChanged(string value)
    {
        inputValue = value;

        validations.ValidateAll();

        storeState();
    }

    // Icrements masher, then store state to session storage
    public void incrementState()
    {
        // Validate user input
        if (inputValue == "")
        {
            validations.ValidateAll();
        }

        increment();

        // Store incremented state
        storeState();
    }

    // Reset state (incl. sessionStorage) but keeps input intact
    public void resetState()
    {
        // Maybe show warning popup here before resetting

        reset();    // Reset the current masher, excluding user test input

        sessionStorage.SetItem<int>("totalCount", 0);
        sessionStorage.SetItem<int>("levelCount", 0);
        sessionStorage.SetItem<int>("currentLevel", 0);

    }

    // Store the state to session storage
    public void storeState()
    {
        sessionStorage.SetItem<string>("input", inputValue);
        sessionStorage.SetItem<int>("totalCount", _totalCount);
        sessionStorage.SetItem<int>("levelCount", _levelCount);
        sessionStorage.SetItem<int>("currentLevel", _currentLevel);
    }

}
