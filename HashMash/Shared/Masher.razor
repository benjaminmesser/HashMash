

<div class="row justify-content-center">
    <div class="col-lg-3">
        <Validations @ref="validations" Mode="ValidationMode.Auto" ValidateOnLoad="false">
            <Validation Validator="@ValidationRule.IsNotEmpty">
                <TextEdit Size="Size.Medium" Text="@inputValue" TextChanged="@inputChanged" MaxLength="16" Placeholder="">
                    <Feedback>
                        <ValidationNone>Input something and start clicking!</ValidationNone>
                        <ValidationSuccess>Good enough.</ValidationSuccess>
                        <ValidationError>I suggest you enter something or nothing is going to happen...</ValidationError>
                    </Feedback>
                </TextEdit>
            </Validation>
        </Validations>
    </div>
</div>
    
<hr />

<p>Total Clicks: @totalCount</p>

<h6>Level: @currentLevel</h6>

<div class="row justify-content-center">
    <div class="col-sm-3">
        <div class="progress">
            <div class="progress-bar progress-bar-animated" role="progressbar" aria-valuenow="@progress%" aria-valuemin="0" aria-valuemax="64" style="width: @progress%"></div>
        </div>
    </div>
</div>

<h5>Level Clicks: @levelCount</h5>

<div class="col" style="padding-bottom: 10px;">
    <button type="button" @onclick="incrementState" class="btn btn-outline-success">Mash</button>
    <button type="button" @onclick="resetState" class="btn btn-outline-danger">Reset</button>
</div>


<div class="table-responsive">
    @if (inputValue != "") // Only show output table when there is non empty input from user
    {
        <table class="table">

            <thead>
                <tr>
                    <th scope="col">Input</th>
                    @foreach (var c in inputValue)
                    {
                        <th scope="col">@c<small> (+ @levelCount)</small></th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th scope="row">Decimal</th>
                    @foreach (char c in inputValue)
                    {
                        // Mash each char -> base 10
                        <td>@mashCh(c, 10)</td>
                    }
                </tr>
                <tr>
                    <th scope="row">Binary</th>
                    @foreach (char c in inputValue)
                    {
                        // Mash each char -> binary
                        <td>@mashCh(c, 2)</td>
                    }
                </tr>
                <tr>
                    <th scope="row">Hexadecimal</th>
                    @foreach (char c in inputValue)
                    {
                        // Mash each char -> hexadecimal
                        <td>@mashCh(c, 16)</td>
                    }
                </tr>
            </tbody>
        </table>
    }
</div>


@if (inputValue != "")
{
    // Display the hash digest
    <h4>Hash Digest:</h4>
    <h5>@mashInput()</h5>
}

@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage


@code {

    public string inputValue;

    Validations validations;

    // Check session storage for an existing state, set fields if one exists
    protected override void OnInitialized()
    {

        var sessionInput = sessionStorage.GetItem<string>("input");

        // Test input value for a stored session
        if (sessionInput == null)
        {
            inputValue = "";
        }
        else
        {
            inputValue = sessionInput;
            totalCount = sessionStorage.GetItem<int>("totalCount");
            levelCount = sessionStorage.GetItem<int>("levelCount");
            currentLevel = sessionStorage.GetItem<int>("currentLevel");
            progress = (((float)levelCount) / 64) * 100;
        }

    }

    // To reflect changes in user input, as user changes the input
    void inputChanged(string value)
    {
        inputValue = value;

        storeState();

    }

    // Icrements masher, then store state to session storage
    public void incrementState()
    {
        // Check for user input and validate
        if (inputValue == "")
        {
            validations.ValidateAll();
        }

        increment();

        // Store incremented state
        storeState();
    }

    // Reset state (incl. sessionStorage) but keeps input intact
    public void resetState()
    {
        // Maybe show warning popup here before resetting

        reset();    // Reset the current masher, excluding user test input

        sessionStorage.RemoveItem("totalCount");
        sessionStorage.RemoveItem("levelCount");
        sessionStorage.RemoveItem("currentLevel");


    }

    // Store the state to session storage
    public void storeState()
    {
        sessionStorage.SetItem<string>("input", inputValue);
        sessionStorage.SetItem<int>("totalCount", totalCount);
        sessionStorage.SetItem<int>("levelCount", levelCount);
        sessionStorage.SetItem<int>("currentLevel", currentLevel);
    }

}
