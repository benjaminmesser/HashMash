<div class="container text-center">
    <div class="row justify-content-center">
        <div class="col-lg-3">
            <Validations @ref="validations" Mode="ValidationMode.Manual">
                <Validation Validator="@ValidationRule.IsNotEmpty">
                    <TextEdit Size="Size.Medium" Text="@inputValue" TextChanged="@inputChanged" Placeholder="">
                        <Feedback>
                            <ValidationNone>Input something!</ValidationNone>
                            <ValidationSuccess>Good enough.</ValidationSuccess>
                            <ValidationError>I suggest you enter something or nothing is going to happen...</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Validations>
        </div>
    </div>

    <hr />

    <div class="row justify-content-center">
        <div class="col-md-6" style="overflow:auto">
            @if (inputValue != "")
            {
                <div class="card" style="margin-bottom: 20px;">
                    <h5 class="card-title">Hash Digest</h5>
                    <p class="card-text">@mashInput()</p>       
                </div>
            }
            </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="card text-start" style="margin-bottom: 20px;">
                <div class="card-body">
                    <form @oninput="storeState">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" @bind="charOffsetEnabled" @oninput="(EventArgs) => { charOffsetEnabled = (bool)EventArgs.Value; }" id="charOffsetCheckbox">
                            <label class="form-check-label" for="charOffsetCheckbox"><Tooltip Text="This is what an offset on a character does">Character Offset</Tooltip></label>
                            <span style="float: right">@charOffset</span>
                        </div>
                        <input type="range" name="charOffsetRange" class="form-range" @bind="charOffset" @oninput="(EventArgs) => { charOffset = Int32.Parse(EventArgs.Value.ToString()); }" min="0" max="128" step="1">

                        <hr>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" @bind="bitShiftEnabled" @oninput="(EventArgs) => { bitShiftEnabled = (bool)EventArgs.Value; }" id="bitShiftCheckbox">
                            <label class="form-check-label" for="bitShiftCheckbox"><Tooltip Text="This is what bit shifting does">Bit Shift</Tooltip></label>
                            <span style="float: right">@bitShift</span>
                        </div>
                        <input type="range" class="form-range" @bind="@bitShift" @oninput="(EventArgs) => { bitShift = Int32.Parse(EventArgs.Value.ToString()); }" min="0" max="16" step="1">

                        <hr>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" @bind="modNEnabled" @oninput="(EventArgs) => { modNEnabled = (bool)EventArgs.Value; }" id="modNRange">
                            <label class="form-check-label" for="modNRange"><Tooltip Text="This is what mod n does">Mod <i>n</i></Tooltip></label>
                            <span style="float: right">@modN</span>
                        </div>
                        <input type="range" class="form-range" @bind="modN" @oninput="(EventArgs) => { modN = Int32.Parse(EventArgs.Value.ToString()); }"  min="1" max="256" step="1">

                        <hr />
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" @bind="sha256Enabled" @oninput="(EventArgs) => { sha256Enabled = (bool)EventArgs.Value; }" id="sha256Checkbox">
                            <label class="form-check-label" for="sha256Checkbox"><Tooltip Text="This is what SHA256 is">SHA 256</Tooltip></label>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            @if (inputValue != "") // Only show output table when there is non empty input from user
            {
                <div class="card text-start" style="margin-bottom:20px;">
                    <div class="table-responsive">
                        <table class="table">

                            <thead>
                                <tr>
                                    <th scope="col">Input</th>
                                    @for (int i = 0; i < max_table_chars; i++)
                                    {
                                        <th scope="col">@inputValue[i]</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <th scope="row">Decimal</th>
                                    @for (int i = 0; i < max_table_chars; i++)
                                    {
                                        // Mash each char -> base 10
                                        <td>
                                            @mashCh(inputValue[i], 10)
                                           
                                        </td>
                                    }
                                </tr>
                                <tr>
                                    <th scope="row">Binary</th>
                                    @for (int i = 0; i < max_table_chars; i++)
                                                        {
                                        // Mash each char -> binary
                                        <td>
                                            @mashCh(inputValue[i], 2)

                                        </td>
                                    }
                                </tr>
                                <tr>
                                    <th scope="row">Hexadecimal</th>
                                    @for (int i = 0; i < max_table_chars; i++)
                                                        {
                                        // Mash each char -> hexa
                                        <td>
                                            @mashCh(inputValue[i], 16)

                                        </td>
                                    }
                                </tr>
                            </tbody>
                        </table>
                        
                    </div>
                </div>
            }
            </div>
    </div>


    

</div>


@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@using System.Text.Json;  


@code {

    public string inputValue { get; set; } = "";
    public bool charOffsetEnabled { get; set; }
    public bool bitShiftEnabled { get; set; }
    public bool modNEnabled { get; set; }
    public bool sha256Enabled { get; set; }

    int max_table_chars;    // max number of chars to show on the table; length of input or 8, whichever is less

    Validations validations;

    // Check session storage for an existing state, set fields if one exists
    protected override async Task OnInitializedAsync()
    {

        // Test input value for a stored session
        if (await sessionStorage.ContainKeyAsync("masher"))
        {
            string jsonExisting = await sessionStorage.GetItemAsync<string>("masher");
            Masher existing = JsonSerializer.Deserialize<Masher>(jsonExisting);

            inputValue = existing.inputValue;
            charOffset = existing.charOffset;
            bitShift = existing.bitShift;
            modN = existing.modN;
            charOffsetEnabled = existing.charOffsetEnabled;
            bitShiftEnabled = existing.bitShiftEnabled;
            modNEnabled = existing.modNEnabled;
            sha256Enabled = existing.sha256Enabled;

        }

        max_table_chars = Math.Min(inputValue.Length, 8);    // max number of chars to show on the table; length of input or 8, whichever is less

    }

    // To reflect changes in user input, as user changes the input
    void inputChanged(string value)
    {

        max_table_chars = Math.Min(value.Length, 8);

        inputValue = value;

        validations.ValidateAll();

        storeState();
    }

    // Reset state (incl. sessionStorage) but keeps input intact
    public void resetState()
    {
        // Maybe show warning popup here before resetting

        //reset();    // Reset the current masher, excluding user test input


    }

    // Store the state to session storage
    public async void storeState()
    {

        string serialized = JsonSerializer.Serialize(this);
        await sessionStorage.SetItemAsync<string>("masher", serialized);

    }

}
